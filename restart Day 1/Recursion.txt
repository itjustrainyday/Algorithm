Recursion (재귀)란, 하나의 함수에서 자기 자신을 다시 호출해 작업을 수행하는 알고리즘

재귀로 문제를 해결한다는 의미는, 귀납적인 방식으로 문제를 풀어야한다.
--> 절차지향적인 사고를 벗어나야함
ex) 도미노
도미노가 쓰러지는 과정을 생각하면, 1번도미노가 쓰러지면 2번도미노가 쓰러지고
그러고 3번 도미노가 쓰러진다.
그렇다면 임의의 변수 k가 있다.
도미노가 쓰러지면 k가 쓰러지고 k+1번도 쓰러진다.라는 생각을 하면
모든 도미노가 쓰러진다는 결론에 도달해야한다.

재귀 함수의 조건 : 특정 입력에 대해서는 자기 자신을 호출하지 않고 종료해야한다.
: 이걸 base condition이라고 함
모든 입력은 base condition으로 수렴해야함 -> 이걸 수렴하지 않는다면 무한 루프에 빠져 런타임 에러가 날 것이다.

재귀에 대한 꿀팁 :
1. 함수의 인자로 어떤 것을 받고 어디까지 계산한 후 자기 자신에게 넘겨줄지 명확하게 정해야 함
2. 모든 재귀 함수는 반복문만으로 동일한 동작을 하는 함수를 만들 수 있음
3. 재귀는 반복문으로 구현했을 때에 비해 코드가 간결하지만 메모리/시간에서는 손해를 봄 
-> 문제를 풀면서 반복문으로 구현을 했을 때 코드가 너무 복잡해지면 재귀를 사용하자
4. 재귀는 한 함수가 자기 자신을 여러 번 호출하게 되면 비효율적 -> ex) 피보나치 수열
-> O(1.618의 n승) -> 굉장히 비 효율적이라 볼 수 있음 -> 중요하진 않지만 n의 지수함수 만큼의 시간이 걸린다
라고 보면 편하다 -> 재귀를 무턱대고 사용하면 중복된 계산을 해서 굉장히 낭비된다고 볼 수 있다.

재귀 함수는 자기 자신을 부를 때, 스택 영역에서 계속 누적된다고 볼 수 있다.
